// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kv_opt.proto

#include "kv_opt.pb.h"
#include "kv_opt.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace kv_operate {

static const char* KV_server_method_names[] = {
  "/kv_operate.KV_server/Add_KV",
  "/kv_operate.KV_server/Delete_KV",
  "/kv_operate.KV_server/Query_KV",
};

std::unique_ptr< KV_server::Stub> KV_server::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KV_server::Stub> stub(new KV_server::Stub(channel, options));
  return stub;
}

KV_server::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Add_KV_(KV_server_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_KV_(KV_server_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Query_KV_(KV_server_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KV_server::Stub::Add_KV(::grpc::ClientContext* context, const ::kv_operate::Add_Req& request, ::kv_operate::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kv_operate::Add_Req, ::kv_operate::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Add_KV_, context, request, response);
}

void KV_server::Stub::async::Add_KV(::grpc::ClientContext* context, const ::kv_operate::Add_Req* request, ::kv_operate::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kv_operate::Add_Req, ::kv_operate::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_KV_, context, request, response, std::move(f));
}

void KV_server::Stub::async::Add_KV(::grpc::ClientContext* context, const ::kv_operate::Add_Req* request, ::kv_operate::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Add_KV_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kv_operate::Reply>* KV_server::Stub::PrepareAsyncAdd_KVRaw(::grpc::ClientContext* context, const ::kv_operate::Add_Req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kv_operate::Reply, ::kv_operate::Add_Req, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Add_KV_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kv_operate::Reply>* KV_server::Stub::AsyncAdd_KVRaw(::grpc::ClientContext* context, const ::kv_operate::Add_Req& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAdd_KVRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KV_server::Stub::Delete_KV(::grpc::ClientContext* context, const ::kv_operate::Delete_Req& request, ::kv_operate::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kv_operate::Delete_Req, ::kv_operate::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_KV_, context, request, response);
}

void KV_server::Stub::async::Delete_KV(::grpc::ClientContext* context, const ::kv_operate::Delete_Req* request, ::kv_operate::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kv_operate::Delete_Req, ::kv_operate::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_KV_, context, request, response, std::move(f));
}

void KV_server::Stub::async::Delete_KV(::grpc::ClientContext* context, const ::kv_operate::Delete_Req* request, ::kv_operate::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_KV_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kv_operate::Reply>* KV_server::Stub::PrepareAsyncDelete_KVRaw(::grpc::ClientContext* context, const ::kv_operate::Delete_Req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kv_operate::Reply, ::kv_operate::Delete_Req, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_KV_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kv_operate::Reply>* KV_server::Stub::AsyncDelete_KVRaw(::grpc::ClientContext* context, const ::kv_operate::Delete_Req& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelete_KVRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KV_server::Stub::Query_KV(::grpc::ClientContext* context, const ::kv_operate::Query_Req& request, ::kv_operate::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kv_operate::Query_Req, ::kv_operate::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Query_KV_, context, request, response);
}

void KV_server::Stub::async::Query_KV(::grpc::ClientContext* context, const ::kv_operate::Query_Req* request, ::kv_operate::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kv_operate::Query_Req, ::kv_operate::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_KV_, context, request, response, std::move(f));
}

void KV_server::Stub::async::Query_KV(::grpc::ClientContext* context, const ::kv_operate::Query_Req* request, ::kv_operate::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_KV_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kv_operate::Reply>* KV_server::Stub::PrepareAsyncQuery_KVRaw(::grpc::ClientContext* context, const ::kv_operate::Query_Req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kv_operate::Reply, ::kv_operate::Query_Req, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Query_KV_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kv_operate::Reply>* KV_server::Stub::AsyncQuery_KVRaw(::grpc::ClientContext* context, const ::kv_operate::Query_Req& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQuery_KVRaw(context, request, cq);
  result->StartCall();
  return result;
}

KV_server::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_server_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV_server::Service, ::kv_operate::Add_Req, ::kv_operate::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kv_operate::Add_Req* req,
             ::kv_operate::Reply* resp) {
               return service->Add_KV(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_server_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV_server::Service, ::kv_operate::Delete_Req, ::kv_operate::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kv_operate::Delete_Req* req,
             ::kv_operate::Reply* resp) {
               return service->Delete_KV(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KV_server_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KV_server::Service, ::kv_operate::Query_Req, ::kv_operate::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KV_server::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kv_operate::Query_Req* req,
             ::kv_operate::Reply* resp) {
               return service->Query_KV(ctx, req, resp);
             }, this)));
}

KV_server::Service::~Service() {
}

::grpc::Status KV_server::Service::Add_KV(::grpc::ServerContext* context, const ::kv_operate::Add_Req* request, ::kv_operate::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV_server::Service::Delete_KV(::grpc::ServerContext* context, const ::kv_operate::Delete_Req* request, ::kv_operate::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KV_server::Service::Query_KV(::grpc::ServerContext* context, const ::kv_operate::Query_Req* request, ::kv_operate::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kv_operate

